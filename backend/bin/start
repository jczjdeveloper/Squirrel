#!/usr/bin/env node
/* eslint strict: 0 */

'use strict';

/**
 * Module dependencies.
 */

// enables ES6 ('import'.. etc) in Node
require('babel-core/register');
require('babel-polyfill');

const app = require('../app').default;
const debug = require('debug')('backend:server');
const https = require('https');

const fs = require('fs');

// import dependencies
//const mongoose = require('mongoose');

// import socket.io
const socket = require('socket.io');

// usernames which are currently connected to the chat
let usernames = {};

// rooms which are currently available in chat
const rooms = ['roomA', 'roomB', 'roomC', 'roomD'];

/**
 * Normalize a port into a number, string, or false.
 */

const normalizePort = function(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
};

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '443');
app.set('port', port);

/**
 * Create HTTP server.
 */

//const server = http.createServer(app);
const key = fs.readFileSync('./squirrel-key.pem');
const cert = fs.readFileSync('./squirrel-cert.pem');
const option = {
  key: key,
  cert: cert
}
const server = https.createServer(option, app);

// server.listen(app.get);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.log('listening to port: '+port);
});

// socket.io
const io = socket(server);

io.on('connection', (socket) =>{
  console.log('made socket connection', socket.id);
  var userLong  = 0;
  var userLat = 0;
  // sort user to the rooms by geo locations
  //app.get()
  socket.on('userLongitude', (longitude)=> {
    console.log(longitude);
    userLong = longitude;
    console.log(userLong);

    socket.on("userLatitude", (latitude) => {
      console.log(latitude);
      userLat = latitude;
      console.log(userLat);


  if (userLat !== 0) {
    if (userLat < 1.473298 && userLat > 1.352083) {
      if (userLong < 104.021301 && userLong > 103.819836) {
        // go to room B
        socket.join('roomB');
        console.log("you are in room B");
      } else {
        // go to room A
        socket.join('roomA');
        console.log("you are in room A");
      }
    } else if (userLat < 1.352083 && userLat > 1.230868) {
      if (userLong < 103.819836 && userLong > 103.596681) {
        // go to room C
        socket.join('roomC');
        console.log("you are in room C");
      } else {
        // go to room D
        socket.join('roomD');
        console.log("you are in room D");
      }
    } else {
      // go to default /chat
      console.log('No room for you! GHOST!!!');
    }
  }


  });

  });
  socket.on('new-message', (msg) => {
    console.log(msg)
    io.emit("receive-message", msg);
  });

  // handle chat messages for room A
  // socket.on('new-message', (msg) => {
  //   console.log(msg)
  //   io.to('roomA').emit("receive-message", msg);
  // });
  // handle chat messages for room B
  // socket.on('new-message', (msg) => {
  //   console.log(msg)
  //   io.to('roomB').emit("receive-message", msg);
  // });
  // handle chat messages for room C
  // socket.on('new-message', (msg) => {
  //   console.log(msg)
  //   io.to('roomC').emit("receive-message", msg);
  // });
  // handle chat messages for room D
  // socket.on('new-message', (msg) => {
  //   console.log(msg)
  //   io.to('roomD').emit("receive-message", msg);
  // });

  // handle typing message notification for room A
  socket.on('typing', (data) => {
    socket.broadcast.emit('typing', data);
  });
  // handle typing message notification for room B
  // socket.on('typing', (data) => {
  //   socket.broadcast.to('roomB').emit('typing', data);
  // });
  // handle typing message notification for room C
  // socket.on('typing', (data) => {
  //   socket.broadcast.to('roomC').emit('typing', data);
  // });
  // handle typing message notification for room D
  // socket.on('typing', (data) => {
  //   socket.broadcast.to('roomD').emit('typing', data);
  // });


});



/**
 * Event listener for HTTP server "error" event.
 */

server.on('error', (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
   ? `Pipe ${port}`
   : `Port ${port}`;

   // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      debug(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      debug(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

/**
 * Event listener for HTTP server "listening" event.
 */

server.on('listening', () => {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
});
